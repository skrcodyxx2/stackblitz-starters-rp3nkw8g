/**
 * Tests de S√©curit√© - Dounie Cuisine Pro
 * V√©rifie les aspects de s√©curit√© de l'application
 */

const fs = require('fs');
const path = require('path');

class SecurityTest {
  constructor() {
    this.vulnerabilities = [];
    this.warnings = [];
    this.recommendations = [];
  }

  async runSecurityTests() {
    console.log('üîí D√©marrage des tests de s√©curit√©...\n');

    await this.checkEnvironmentVariables();
    await this.checkAuthenticationSecurity();
    await this.checkInputValidation();
    await this.checkDependencyVulnerabilities();
    await this.checkCodeSecurity();
    await this.checkDatabaseSecurity();

    this.generateSecurityReport();
  }

  async checkEnvironmentVariables() {
    console.log('üîê V√©rification des variables d\'environnement...');

    try {
      // V√©rifier le fichier .env
      if (!fs.existsSync('.env')) {
        this.vulnerabilities.push({
          severity: 'high',
          type: 'Configuration',
          message: 'Fichier .env manquant',
          recommendation: 'Cr√©er un fichier .env avec les variables Supabase'
        });
        return;
      }

      const envContent = fs.readFileSync('.env', 'utf8');
      
      // V√©rifier les variables requises
      const requiredVars = [
        'VITE_SUPABASE_URL',
        'VITE_SUPABASE_ANON_KEY'
      ];

      for (const varName of requiredVars) {
        if (!envContent.includes(varName)) {
          this.vulnerabilities.push({
            severity: 'high',
            type: 'Configuration',
            message: `Variable d'environnement manquante: ${varName}`,
            recommendation: 'Ajouter toutes les variables Supabase requises'
          });
        }
      }

      // V√©rifier que les cl√©s ne sont pas expos√©es dans le code
      const srcFiles = this.getAllFiles('src', ['.tsx', '.ts', '.jsx', '.js']);
      for (const file of srcFiles) {
        const content = fs.readFileSync(file, 'utf8');
        
        // Chercher des cl√©s hardcod√©es
        const hardcodedKeys = content.match(/[a-zA-Z0-9]{40,}/g) || [];
        if (hardcodedKeys.length > 0) {
          this.warnings.push({
            severity: 'medium',
            type: 'Secrets',
            message: `Cl√©s potentiellement hardcod√©es dans ${file}`,
            recommendation: 'Utiliser les variables d\'environnement'
          });
        }
      }

      console.log('‚úÖ Variables d\'environnement v√©rifi√©es');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des variables:', error.message);
    }
  }

  async checkAuthenticationSecurity() {
    console.log('\nüîë V√©rification de la s√©curit√© d\'authentification...');

    try {
      // V√©rifier AuthContext
      const authContextPath = 'src/contexts/AuthContext.tsx';
      if (!fs.existsSync(authContextPath)) {
        this.vulnerabilities.push({
          severity: 'critical',
          type: 'Authentication',
          message: 'AuthContext manquant',
          recommendation: 'Impl√©menter un syst√®me d\'authentification s√©curis√©'
        });
        return;
      }

      const authContent = fs.readFileSync(authContextPath, 'utf8');

      // V√©rifier la gestion des erreurs
      if (!authContent.includes('try') || !authContent.includes('catch')) {
        this.vulnerabilities.push({
          severity: 'medium',
          type: 'Authentication',
          message: 'Gestion d\'erreurs insuffisante dans AuthContext',
          recommendation: 'Ajouter une gestion d\'erreurs robuste'
        });
      }

      // V√©rifier la protection des routes
      const protectedRoutePath = 'src/components/auth/ProtectedRoute.tsx';
      if (!fs.existsSync(protectedRoutePath)) {
        this.vulnerabilities.push({
          severity: 'high',
          type: 'Authorization',
          message: 'Composant ProtectedRoute manquant',
          recommendation: 'Impl√©menter la protection des routes par r√¥le'
        });
      } else {
        const protectedContent = fs.readFileSync(protectedRoutePath, 'utf8');
        
        if (!protectedContent.includes('requiredRole')) {
          this.vulnerabilities.push({
            severity: 'high',
            type: 'Authorization',
            message: 'Protection par r√¥le insuffisante',
            recommendation: 'Impl√©menter la v√©rification des r√¥les utilisateur'
          });
        }
      }

      // V√©rifier les pages de connexion
      const loginPagePath = 'src/pages/auth/LoginPage.tsx';
      if (fs.existsSync(loginPagePath)) {
        const loginContent = fs.readFileSync(loginPagePath, 'utf8');
        
        if (!loginContent.includes('zodResolver')) {
          this.warnings.push({
            severity: 'medium',
            type: 'Validation',
            message: 'Validation des formulaires de connexion insuffisante',
            recommendation: 'Utiliser Zod pour la validation c√¥t√© client'
          });
        }
      }

      console.log('‚úÖ S√©curit√© d\'authentification v√©rifi√©e');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de l\'authentification:', error.message);
    }
  }

  async checkInputValidation() {
    console.log('\n‚úÖ V√©rification de la validation des entr√©es...');

    try {
      const formPages = [
        'src/pages/auth/LoginPage.tsx',
        'src/pages/auth/RegisterPage.tsx',
        'src/pages/public/ContactPage.tsx',
        'src/pages/public/ReservationPage.tsx'
      ];

      for (const pagePath of formPages) {
        if (!fs.existsSync(pagePath)) continue;

        const content = fs.readFileSync(pagePath, 'utf8');
        
        // V√©rifier la pr√©sence de validation
        if (!content.includes('zodResolver') && !content.includes('yupResolver')) {
          this.warnings.push({
            severity: 'medium',
            type: 'Validation',
            message: `Validation manquante dans ${path.basename(pagePath)}`,
            recommendation: 'Ajouter une validation avec Zod ou Yup'
          });
        }

        // V√©rifier la sanitisation
        if (content.includes('dangerouslySetInnerHTML')) {
          this.vulnerabilities.push({
            severity: 'high',
            type: 'XSS',
            message: `Utilisation dangereuse de dangerouslySetInnerHTML dans ${pagePath}`,
            recommendation: 'Sanitiser le contenu HTML ou utiliser des alternatives s√ªres'
          });
        }

        // V√©rifier les injections SQL potentielles
        if (content.includes('${') && content.includes('supabase')) {
          this.warnings.push({
            severity: 'medium',
            type: 'SQL Injection',
            message: `Interpolation de cha√Ænes avec Supabase dans ${pagePath}`,
            recommendation: 'Utiliser les param√®tres de requ√™te Supabase'
          });
        }
      }

      console.log('‚úÖ Validation des entr√©es v√©rifi√©e');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la validation:', error.message);
    }
  }

  async checkDependencyVulnerabilities() {
    console.log('\nüì¶ V√©rification des vuln√©rabilit√©s des d√©pendances...');

    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

      // D√©pendances connues avec des vuln√©rabilit√©s
      const knownVulnerabilities = {
        'react-scripts': {
          versions: ['<5.0.0'],
          severity: 'medium',
          issue: 'Vuln√©rabilit√©s dans les versions anciennes'
        },
        'lodash': {
          versions: ['<4.17.21'],
          severity: 'high',
          issue: 'Prototype pollution'
        }
      };

      for (const [dep, info] of Object.entries(knownVulnerabilities)) {
        if (dependencies[dep]) {
          this.warnings.push({
            severity: info.severity,
            type: 'Dependency',
            message: `Vuln√©rabilit√© potentielle dans ${dep}`,
            recommendation: `Mettre √† jour ${dep} vers une version s√©curis√©e`
          });
        }
      }

      // V√©rifier les d√©pendances obsol√®tes
      const outdatedPatterns = [
        'react@16',
        'react@17',
        'node-sass',
        'babel-eslint'
      ];

      for (const pattern of outdatedPatterns) {
        const [pkg] = pattern.split('@');
        if (dependencies[pkg]) {
          this.warnings.push({
            severity: 'low',
            type: 'Outdated',
            message: `D√©pendance potentiellement obsol√®te: ${pkg}`,
            recommendation: `Consid√©rer la mise √† jour de ${pkg}`
          });
        }
      }

      console.log('‚úÖ D√©pendances v√©rifi√©es');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des d√©pendances:', error.message);
    }
  }

  async checkCodeSecurity() {
    console.log('\nüîç V√©rification de la s√©curit√© du code...');

    try {
      const allFiles = this.getAllFiles('src', ['.tsx', '.ts', '.jsx', '.js']);

      for (const file of allFiles) {
        const content = fs.readFileSync(file, 'utf8');

        // V√©rifier les patterns dangereux
        const dangerousPatterns = [
          {
            pattern: /eval\s*\(/g,
            message: 'Utilisation d\'eval() d√©tect√©e',
            severity: 'critical'
          },
          {
            pattern: /innerHTML\s*=/g,
            message: 'Utilisation d\'innerHTML d√©tect√©e',
            severity: 'medium'
          },
          {
            pattern: /document\.write/g,
            message: 'Utilisation de document.write d√©tect√©e',
            severity: 'medium'
          },
          {
            pattern: /window\.location\.href\s*=/g,
            message: 'Redirection non contr√¥l√©e d√©tect√©e',
            severity: 'low'
          }
        ];

        for (const { pattern, message, severity } of dangerousPatterns) {
          if (pattern.test(content)) {
            this.warnings.push({
              severity,
              type: 'Code Security',
              message: `${message} dans ${file}`,
              recommendation: 'Utiliser des alternatives s√©curis√©es'
            });
          }
        }

        // V√©rifier les commentaires avec des informations sensibles
        const sensitiveComments = content.match(/\/\/.*(?:password|secret|key|token|api)/gi);
        if (sensitiveComments) {
          this.warnings.push({
            severity: 'low',
            type: 'Information Disclosure',
            message: `Commentaires potentiellement sensibles dans ${file}`,
            recommendation: 'Supprimer les informations sensibles des commentaires'
          });
        }
      }

      console.log('‚úÖ S√©curit√© du code v√©rifi√©e');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du code:', error.message);
    }
  }

  async checkDatabaseSecurity() {
    console.log('\nüóÑÔ∏è V√©rification de la s√©curit√© de la base de donn√©es...');

    try {
      // V√©rifier la configuration Supabase
      const supabaseConfigPath = 'src/lib/supabase.ts';
      if (!fs.existsSync(supabaseConfigPath)) {
        this.vulnerabilities.push({
          severity: 'critical',
          type: 'Database',
          message: 'Configuration Supabase manquante',
          recommendation: 'Configurer correctement le client Supabase'
        });
        return;
      }

      const supabaseContent = fs.readFileSync(supabaseConfigPath, 'utf8');

      // V√©rifier l'utilisation des variables d'environnement
      if (!supabaseContent.includes('import.meta.env')) {
        this.vulnerabilities.push({
          severity: 'high',
          type: 'Database',
          message: 'Cl√©s Supabase potentiellement hardcod√©es',
          recommendation: 'Utiliser les variables d\'environnement'
        });
      }

      // V√©rifier les migrations SQL
      if (fs.existsSync('supabase/migrations')) {
        const migrationFiles = fs.readdirSync('supabase/migrations')
          .filter(f => f.endsWith('.sql'));

        for (const migrationFile of migrationFiles) {
          const migrationPath = path.join('supabase/migrations', migrationFile);
          const migrationContent = fs.readFileSync(migrationPath, 'utf8');

          // V√©rifier RLS
          if (!migrationContent.includes('ROW LEVEL SECURITY')) {
            this.warnings.push({
              severity: 'high',
              type: 'Database Security',
              message: `RLS manquant dans ${migrationFile}`,
              recommendation: 'Activer Row Level Security sur toutes les tables'
            });
          }

          // V√©rifier les politiques
          if (!migrationContent.includes('CREATE POLICY')) {
            this.warnings.push({
              severity: 'medium',
              type: 'Database Security',
              message: `Politiques de s√©curit√© manquantes dans ${migrationFile}`,
              recommendation: 'Cr√©er des politiques RLS appropri√©es'
            });
          }
        }
      }

      console.log('‚úÖ S√©curit√© de la base de donn√©es v√©rifi√©e');

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', error.message);
    }
  }

  getAllFiles(dirPath, extensions) {
    if (!fs.existsSync(dirPath)) return [];
    
    let allFiles = [];
    const files = fs.readdirSync(dirPath);
    
    for (const file of files) {
      const filePath = path.join(dirPath, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        allFiles = allFiles.concat(this.getAllFiles(filePath, extensions));
      } else if (extensions.some(ext => file.endsWith(ext))) {
        allFiles.push(filePath);
      }
    }
    
    return allFiles;
  }

  generateSecurityReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üîí RAPPORT DE S√âCURIT√â');
    console.log('='.repeat(60));

    const totalIssues = this.vulnerabilities.length + this.warnings.length;
    const criticalIssues = this.vulnerabilities.filter(v => v.severity === 'critical').length;
    const highIssues = this.vulnerabilities.filter(v => v.severity === 'high').length + 
                      this.warnings.filter(w => w.severity === 'high').length;

    console.log(`\nüìä R√âSUM√â:`);
    console.log(`   Total des probl√®mes: ${totalIssues}`);
    console.log(`   Critiques: ${criticalIssues}`);
    console.log(`   √âlev√©s: ${highIssues}`);
    console.log(`   Moyens: ${this.vulnerabilities.filter(v => v.severity === 'medium').length + this.warnings.filter(w => w.severity === 'medium').length}`);
    console.log(`   Faibles: ${this.vulnerabilities.filter(v => v.severity === 'low').length + this.warnings.filter(w => w.severity === 'low').length}`);

    // Score de s√©curit√©
    const securityScore = this.calculateSecurityScore();
    console.log(`\nüéØ SCORE DE S√âCURIT√â: ${this.getScoreEmoji(securityScore)} ${securityScore}/100`);

    // Vuln√©rabilit√©s critiques
    if (this.vulnerabilities.length > 0) {
      console.log('\nüö® VULN√âRABILIT√âS:');
      for (const vuln of this.vulnerabilities) {
        const icon = vuln.severity === 'critical' ? 'üî¥' : vuln.severity === 'high' ? 'üü†' : 'üü°';
        console.log(`   ${icon} [${vuln.severity.toUpperCase()}] ${vuln.message}`);
        console.log(`      ‚Üí ${vuln.recommendation}`);
      }
    }

    // Avertissements
    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è AVERTISSEMENTS:');
      for (const warning of this.warnings) {
        const icon = warning.severity === 'high' ? 'üü†' : warning.severity === 'medium' ? 'üü°' : 'üîµ';
        console.log(`   ${icon} [${warning.severity.toUpperCase()}] ${warning.message}`);
        console.log(`      ‚Üí ${warning.recommendation}`);
      }
    }

    // Recommandations g√©n√©rales
    console.log('\nüí° RECOMMANDATIONS G√âN√âRALES:');
    const generalRecommendations = [
      'Impl√©menter des headers de s√©curit√© (CSP, HSTS, etc.)',
      'Configurer un syst√®me de monitoring de s√©curit√©',
      'Effectuer des audits de s√©curit√© r√©guliers',
      'Mettre en place des tests de p√©n√©tration',
      'Former l\'√©quipe aux bonnes pratiques de s√©curit√©'
    ];

    for (const rec of generalRecommendations) {
      console.log(`   üí° ${rec}`);
    }

    // Sauvegarder le rapport
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalIssues,
        criticalIssues,
        highIssues,
        securityScore
      },
      vulnerabilities: this.vulnerabilities,
      warnings: this.warnings,
      recommendations: generalRecommendations
    };

    fs.writeFileSync('security-report.json', JSON.stringify(report, null, 2));
    console.log('\nüìÑ Rapport d√©taill√© sauvegard√© dans security-report.json');

    // Statut final
    if (criticalIssues > 0) {
      console.log('\nüö® STATUT: VULN√âRABILIT√âS CRITIQUES D√âTECT√âES - ACTION IMM√âDIATE REQUISE');
    } else if (highIssues > 0) {
      console.log('\n‚ö†Ô∏è STATUT: PROBL√àMES DE S√âCURIT√â √âLEV√âS - CORRECTIONS RECOMMAND√âES');
    } else if (totalIssues > 0) {
      console.log('\n‚úÖ STATUT: S√âCURIT√â ACCEPTABLE - AM√âLIORATIONS MINEURES POSSIBLES');
    } else {
      console.log('\nüéâ STATUT: EXCELLENTE S√âCURIT√â - AUCUN PROBL√àME D√âTECT√â');
    }
  }

  calculateSecurityScore() {
    let score = 100;

    // P√©nalit√©s par s√©v√©rit√©
    score -= this.vulnerabilities.filter(v => v.severity === 'critical').length * 25;
    score -= this.vulnerabilities.filter(v => v.severity === 'high').length * 15;
    score -= this.vulnerabilities.filter(v => v.severity === 'medium').length * 10;
    score -= this.vulnerabilities.filter(v => v.severity === 'low').length * 5;

    score -= this.warnings.filter(w => w.severity === 'high').length * 10;
    score -= this.warnings.filter(w => w.severity === 'medium').length * 5;
    score -= this.warnings.filter(w => w.severity === 'low').length * 2;

    return Math.max(0, score);
  }

  getScoreEmoji(score) {
    if (score >= 90) return 'üü¢';
    if (score >= 70) return 'üü°';
    if (score >= 50) return 'üü†';
    return 'üî¥';
  }
}

// Ex√©cution des tests
if (require.main === module) {
  const securityTest = new SecurityTest();
  securityTest.runSecurityTests().catch(error => {
    console.error('Erreur lors des tests de s√©curit√©:', error);
    process.exit(1);
  });
}

module.exports = SecurityTest;